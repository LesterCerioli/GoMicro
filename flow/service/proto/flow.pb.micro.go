// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service/proto/flow.proto

package go_micro_flow

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Flow service

type FlowService interface {
	CreateStep(ctx context.Context, in *CreateStepRequest, opts ...client.CallOption) (*Empty, error)
	DeleteStep(ctx context.Context, in *DeleteStepRequest, opts ...client.CallOption) (*Empty, error)
	UpdateStep(ctx context.Context, in *UpdateStepRequest, opts ...client.CallOption) (*Empty, error)
	Execute(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
}

type flowService struct {
	c    client.Client
	name string
}

func NewFlowService(name string, c client.Client) FlowService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.flow"
	}
	return &flowService{
		c:    c,
		name: name,
	}
}

func (c *flowService) CreateStep(ctx context.Context, in *CreateStepRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Flow.CreateStep", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowService) DeleteStep(ctx context.Context, in *DeleteStepRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Flow.DeleteStep", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowService) UpdateStep(ctx context.Context, in *UpdateStepRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Flow.UpdateStep", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowService) Execute(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Flow.Execute", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Flow service

type FlowHandler interface {
	CreateStep(context.Context, *CreateStepRequest, *Empty) error
	DeleteStep(context.Context, *DeleteStepRequest, *Empty) error
	UpdateStep(context.Context, *UpdateStepRequest, *Empty) error
	Execute(context.Context, *Empty, *Empty) error
}

func RegisterFlowHandler(s server.Server, hdlr FlowHandler, opts ...server.HandlerOption) error {
	type flow interface {
		CreateStep(ctx context.Context, in *CreateStepRequest, out *Empty) error
		DeleteStep(ctx context.Context, in *DeleteStepRequest, out *Empty) error
		UpdateStep(ctx context.Context, in *UpdateStepRequest, out *Empty) error
		Execute(ctx context.Context, in *Empty, out *Empty) error
	}
	type Flow struct {
		flow
	}
	h := &flowHandler{hdlr}
	return s.Handle(s.NewHandler(&Flow{h}, opts...))
}

type flowHandler struct {
	FlowHandler
}

func (h *flowHandler) CreateStep(ctx context.Context, in *CreateStepRequest, out *Empty) error {
	return h.FlowHandler.CreateStep(ctx, in, out)
}

func (h *flowHandler) DeleteStep(ctx context.Context, in *DeleteStepRequest, out *Empty) error {
	return h.FlowHandler.DeleteStep(ctx, in, out)
}

func (h *flowHandler) UpdateStep(ctx context.Context, in *UpdateStepRequest, out *Empty) error {
	return h.FlowHandler.UpdateStep(ctx, in, out)
}

func (h *flowHandler) Execute(ctx context.Context, in *Empty, out *Empty) error {
	return h.FlowHandler.Execute(ctx, in, out)
}
