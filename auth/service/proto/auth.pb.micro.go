// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth/service/proto/auth.proto

package go_micro_auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthService interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error)
	Revoke(ctx context.Context, in *RevokeRequest, opts ...client.CallOption) (*RevokeResponse, error)
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleResponse, error)
	RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...client.CallOption) (*RemoveRoleResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.auth"
	}
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Generate(ctx context.Context, in *GenerateRequest, opts ...client.CallOption) (*GenerateResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.Generate", in)
	out := new(GenerateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Revoke(ctx context.Context, in *RevokeRequest, opts ...client.CallOption) (*RevokeResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.Revoke", in)
	out := new(RevokeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.AddRole", in)
	out := new(AddRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...client.CallOption) (*RemoveRoleResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.RemoveRole", in)
	out := new(RemoveRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	Generate(context.Context, *GenerateRequest, *GenerateResponse) error
	Revoke(context.Context, *RevokeRequest, *RevokeResponse) error
	AddRole(context.Context, *AddRoleRequest, *AddRoleResponse) error
	RemoveRole(context.Context, *RemoveRoleRequest, *RemoveRoleResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		Generate(ctx context.Context, in *GenerateRequest, out *GenerateResponse) error
		Revoke(ctx context.Context, in *RevokeRequest, out *RevokeResponse) error
		AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleResponse) error
		RemoveRole(ctx context.Context, in *RemoveRoleRequest, out *RemoveRoleResponse) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) Generate(ctx context.Context, in *GenerateRequest, out *GenerateResponse) error {
	return h.AuthHandler.Generate(ctx, in, out)
}

func (h *authHandler) Revoke(ctx context.Context, in *RevokeRequest, out *RevokeResponse) error {
	return h.AuthHandler.Revoke(ctx, in, out)
}

func (h *authHandler) AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleResponse) error {
	return h.AuthHandler.AddRole(ctx, in, out)
}

func (h *authHandler) RemoveRole(ctx context.Context, in *RemoveRoleRequest, out *RemoveRoleResponse) error {
	return h.AuthHandler.RemoveRole(ctx, in, out)
}
