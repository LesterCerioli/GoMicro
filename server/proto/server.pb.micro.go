// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/go-micro/server/proto/server.proto

package go_micro_server

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Server service

func NewServerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Server service

type ServerService interface {
	Handle(ctx context.Context, in *HandleRequest, opts ...client.CallOption) (*HandleResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error)
	Open(ctx context.Context, in *OpenRequest, opts ...client.CallOption) (*OpenResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...client.CallOption) (*StatResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...client.CallOption) (*WriteResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...client.CallOption) (*CloseResponse, error)
}

type serverService struct {
	c    client.Client
	name string
}

func NewServerService(name string, c client.Client) ServerService {
	return &serverService{
		c:    c,
		name: name,
	}
}

func (c *serverService) Handle(ctx context.Context, in *HandleRequest, opts ...client.CallOption) (*HandleResponse, error) {
	req := c.c.NewRequest(c.name, "Server.Handle", in)
	out := new(HandleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error) {
	req := c.c.NewRequest(c.name, "Server.Subscribe", in)
	out := new(SubscribeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Open(ctx context.Context, in *OpenRequest, opts ...client.CallOption) (*OpenResponse, error) {
	req := c.c.NewRequest(c.name, "Server.Open", in)
	out := new(OpenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Stat(ctx context.Context, in *StatRequest, opts ...client.CallOption) (*StatResponse, error) {
	req := c.c.NewRequest(c.name, "Server.Stat", in)
	out := new(StatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.name, "Server.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Write(ctx context.Context, in *WriteRequest, opts ...client.CallOption) (*WriteResponse, error) {
	req := c.c.NewRequest(c.name, "Server.Write", in)
	out := new(WriteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverService) Close(ctx context.Context, in *CloseRequest, opts ...client.CallOption) (*CloseResponse, error) {
	req := c.c.NewRequest(c.name, "Server.Close", in)
	out := new(CloseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerHandler interface {
	Handle(context.Context, *HandleRequest, *HandleResponse) error
	Subscribe(context.Context, *SubscribeRequest, *SubscribeResponse) error
	Open(context.Context, *OpenRequest, *OpenResponse) error
	Stat(context.Context, *StatRequest, *StatResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Write(context.Context, *WriteRequest, *WriteResponse) error
	Close(context.Context, *CloseRequest, *CloseResponse) error
}

func RegisterServerHandler(s server.Server, hdlr ServerHandler, opts ...server.HandlerOption) error {
	type server interface {
		Handle(ctx context.Context, in *HandleRequest, out *HandleResponse) error
		Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error
		Open(ctx context.Context, in *OpenRequest, out *OpenResponse) error
		Stat(ctx context.Context, in *StatRequest, out *StatResponse) error
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
		Write(ctx context.Context, in *WriteRequest, out *WriteResponse) error
		Close(ctx context.Context, in *CloseRequest, out *CloseResponse) error
	}
	type Server struct {
		server
	}
	h := &serverHandler{hdlr}
	return s.Handle(s.NewHandler(&Server{h}, opts...))
}

type serverHandler struct {
	ServerHandler
}

func (h *serverHandler) Handle(ctx context.Context, in *HandleRequest, out *HandleResponse) error {
	return h.ServerHandler.Handle(ctx, in, out)
}

func (h *serverHandler) Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error {
	return h.ServerHandler.Subscribe(ctx, in, out)
}

func (h *serverHandler) Open(ctx context.Context, in *OpenRequest, out *OpenResponse) error {
	return h.ServerHandler.Open(ctx, in, out)
}

func (h *serverHandler) Stat(ctx context.Context, in *StatRequest, out *StatResponse) error {
	return h.ServerHandler.Stat(ctx, in, out)
}

func (h *serverHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.ServerHandler.Read(ctx, in, out)
}

func (h *serverHandler) Write(ctx context.Context, in *WriteRequest, out *WriteResponse) error {
	return h.ServerHandler.Write(ctx, in, out)
}

func (h *serverHandler) Close(ctx context.Context, in *CloseRequest, out *CloseResponse) error {
	return h.ServerHandler.Close(ctx, in, out)
}
